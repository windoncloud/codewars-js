// b = ["ABAR 200", "CDXE 500", "BKWR 250", "BTSQ 890", "DRTY 600"]
// c = ["A", "B"]
// res = "(A : 200) - (B : 1140)"
// Test.assertEquals(stockList(b, c), res)
//
// b = ["CBART 20", "CDXEF 50", "BKWRK 25", "BTSQZ 89", "DRTYM 60"]
// c = ["A", "B", "C", "W"]
// res = "(A : 0) - (B : 114) - (C : 70) - (W : 0)"
// Test.assertEquals(stockList(b, c), res)
// solution : https://www.codewars.com/kata/54dc6f5a224c26032800005c/solutions/javascript
let b = ["ABAR 200", "CDXE 500", "BKWR 250", "BTSQ 890", "DRTY 600"]
let c = ["A", "B", "W"]
function stockList(listOfArt, listOfCat){
    let map = {}
    let final = []
    let finalNumber = 0
    for (let i = 0; i < listOfArt.length; i++) {
        let number = listOfArt[i].split(' ')[1]
        number = parseFloat(number)
        let key = listOfArt[i][0]
        if (map[key]) {
            map[key] += number
        } else {
            map[key] = number
        }
    }
    for (let j = 0; j < listOfCat.length; j++) {
        if (!map[listOfCat[j]]) {
            map[listOfCat[j]]  = 0
        }
        finalNumber += map[listOfCat[j]]
        final.push('(' + listOfCat[j] + ' : ' + map[listOfCat[j]] + ')')
    }
    if (finalNumber === 0) {
        return ''
    }
    return final.join(' - ')
}

console.log('stockList', stockList(b, c))

// best practice

function stockList1(listOfArt, listOfCat) {
    var qs = {};
    if (!listOfArt.length) return '';

    listOfArt.forEach(function(art) {
        var cat = art[0];
        qs[cat] = (qs[cat] | 0) + +art.split(' ')[1];
    });

    return listOfCat.map(function(c) {
        return '(' + c + ' : ' + (qs[c] | 0) + ')';
    }).join(' - ');
}

function stockList2(listOfArt, listOfCat) {
    if (!listOfArt.length || !listOfCat.length) return ''
    return listOfCat.map(w => {
        const s = listOfArt.reduce((a, b) => a + (b.charAt(0) === w ? +b.split(' ')[1] : 0), 0)
        return `(${w} : ${s})`
    }).join(' - ')
}

// Url https://www.codewars.com/kata/help-the-bookseller/train/javascript
//     Help the bookseller !
//     4178284% of 1,18194 of 7,672g964
// JavaScript
// Node v8.1.3
// VIM
// EMACS
// Instructions
// Output
// A bookseller has lots of books classified in 26 categories labeled A, B, ... Z. Each book has a code c of 3, 4, 5 or more capitals letters. The 1st letter of a code is the capital letter of the book category. In the bookseller's stocklist each code c is followed by a space and by a positive integer n (int n >= 0) which indicates the quantity of books of this code in stock.
//
// For example an extract of one of the stocklists could be:
//
//     L = {"ABART 20", "CDXEF 50", "BKWRK 25", "BTSQZ 89", "DRTYM 60"}.
//         or
//
// L = ["ABART 20", "CDXEF 50", "BKWRK 25", "BTSQZ 89", "DRTYM 60"] or ....
// You will be given a stocklist (e.g. : L) and a list of categories in capital letters e.g :
//
// M = {"A", "B", "C", "W"}
// or
//
// M = ["A", "B", "C", "W"] or ...
// and your task is to find all the books of L with codes belonging to each category of M and to sum their quantity according to each category.
//
//     For the lists L and M of example you have to return the string (in Haskell/Clojure/Racket a list of pairs):
//
// (A : 20) - (B : 114) - (C : 50) - (W : 0)
// where A, B, C, W are the categories, 20 is the sum of the unique book of category A, 114 the sum corresponding to "BKWRK" and "BTSQZ", 50 corresponding to "CDXEF" and 0 to category 'W' since there are no code beginning with W.
//
//     If L or M are empty return string is "" (Clojure and Racket should return an empty array/list instead).
//
// Note:
//     In the result codes and their values are in the same order as in M.
