// 31. 下一个排列
// 实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。
// 如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。
// 必须原地修改，只允许使用额外常数空间。
// 以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
// 1,2,3 → 1,3,2
// 3,2,1 → 1,2,3
// 1,1,5 → 1,5,1
// 来源：力扣（LeetCode）
// 链接：https://leetcode-cn.com/problems/next-permutation
//     著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
// 字典序，找下一个值，比如对于1,2,3来说，可以组成这样的字典序列表[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]，就是想让我们找到这其中元素的下一个列表元素，比如[1,2,3]推【1,3,2】,如果到了最后一个元素，则推第一个元素。
/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var nextPermutation = function(nums) {

};
